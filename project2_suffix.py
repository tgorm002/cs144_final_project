#ALL NOTES WILL GO HERE:
#i will leave all print statements and attempts to make the code work to kinda show my work :)
#this stackoverflow website helps: https://stackoverflow.com/questions/26042482/understanding-implementation-of-dc3-skew-algorithm-to-create-suffix-array-linear
#this stackoverflow websitre for appending dictinaries for creating s12 https://stackoverflow.com/questions/8930915/append-a-dictionary-to-a-dictionary
# this website for how to edit dictionay values: https://www.tutorialspoint.com/How-to-replace-values-of-a-Python-dictionary
#I will be basing my radix sort off of this: https://stackoverflow.com/questions/60968950/radix-sort-for-strings-in-python
import operator
from collections import OrderedDict

def count_sort_letters(array, size, col, base, max_len): #https://stackoverflow.com/questions/60968950/radix-sort-for-strings-in-python
  output   = [0] * size
  count    = [0] * (base + 1) # One addition cell to account for dummy letter
  min_base = ord('a') - 1 # subtract one too allow for dummy character

  for item in array: # generate Counts
    # get column letter if within string, else use dummy position of 0
    #print('here:', item[col][1])

    #print('here 2 :', item[1][col])
    #print(type(item[col][1]))
    #print(ord(item[1][col]))
    #print('min base: ', min_base)
    #letter = ord(item[col][1]) - min_base if col < len(item) else 0
    letter = ord(item[1][col].lower()) - min_base
    if letter < 0:
        letter = 0
    #print(letter)
    #print(letter)
    #print(len(count))
    count[letter] += 1
    
    #print(count)

  for i in range(len(count)-1):   # Accumulate counts
      count[i + 1] += count[i]

  for item in reversed(array):
    # Get index of current letter of item at index col in count array
    letter = ord(item[1][col].lower()) - min_base #if col < len(item) else 0
    if letter < 0:
        letter = 0
    output[count[letter] - 1] = item
    count[letter] -= 1

  return output

def radix_sort_letters(array, max_col = None):
  if not max_col:
    max_col = len(max(array, key = len)) # edit to max length #will go to 3 each time since i make sure all strings are of length 3 below
    #if a string is less than 3 chars then i append *

  for col in range(max_col-1, -1, -1): # max_len-1, max_len-2, ...0
    array = count_sort_letters(array, len(array), col, 26, max_col)

  return array

'''
def sortFunc(arr, exp1):
    n = len(arr)
    output = [0] * n
    count = [0] * 10

    # Store count of occurrences in count[] 
    for i in range(0, n): 
        index = (int(arr.values()[i])/exp1) 
        count[int((index)%10)] += 1
    
    # Change count[i] so that count[i] now contains actual 
    #  position of this digit in output array 
    for i in range(1,10): 
        count[i] += count[i-1] 
    
    # Build the output array 
    i = n-1
    while i>=0: 
        index = (arr[i]/exp1) 
        output[ count[ int((index)%10) ] - 1] = arr[i] 
        count[int((index)%10)] -= 1
        i -= 1
    
    # Copying the output array to arr[], 
    # so that arr now contains sorted numbers 
    i = 0
    for i in range(0,len(arr)): 
        arr[i] = output[i] 

def linearRadix(radix):
    charsInStr = 3
    exp = 1
    while charsInStr/exp > 0:
        sortFunc(radix, exp)
        exp *= 10
'''
def suffixArray(t):
    #will attempt the skew algorithm in linear time
    #based off of: https://gist.github.com/markormesher/59b990fba09972b4737e7ed66912e044
    len_t = len(t)
    #print('len_t: ', len_t)
    solution = ''
    
    s0 = {}
    s1 = {}
    s2 = {}

    #s0[0] = t[0]
    #print(s0)
    
    i=0
    while i < len_t:
        s0[i] = t[i:len_t]
        i = i + 3
    #print('s0: ', s0)

    i=1
    while i < len_t:
        s1[i] = t[i:len_t]
        i = i + 3
    #print('s1: ', s1)


    i=2
    while i < len_t:
        s2[i] = t[i:len_t]
        i = i + 3
    #print('s2: ', s2)

    #now to combine s1 and s2 and take the first 3 letters from all of them:

    s12 = {}
    s12 = dict(s1)
    s12.update(s2) #learned this using a website i linked at the top
    #print(s12)
    
    
    for keys, item in s12.items():
        #print(item)
        if len(item) < 3:
            item = item + '*'
            s12[keys] = item #learned this using a website i linked at the top
            
        elif len(item) > 3:
            item = item[0:3]
            s12[keys] = item

    #print('s12 after edits: ', s12)
    #print('s12: ', s12)
    testing = list(s12.items())
    #print('testing:', testing)
    #print('getting value in str: ', testing[0][1])
    #print('output of racix sort: ',radix_sort_letters(testing))
    s12_temp = s12
    #print(s12.values()[2][1])
    #print(linearRadix(s12))
    #print(s12)

    
    #print('s12_temp: ', s12_temp)
    #this was a failed attempt at sorting
    '''sorted_keys = sorted(s12_temp, key=s12_temp.get)
    sorted_dict = {}

    for w in sorted_keys:
        sorted_dict[w] = s12_temp[w]
   
    print('sorted_dict', sorted_dict)
    '''    
    
    #sorted_tuples = sorted(s12_temp.items(), key=operator.itemgetter(1)) #https://stackoverflow.com/questions/18595686/how-do-operator-itemgetter-and-sort-work
    #print(sorted_tuples)
    #sorted_dict_s12 = OrderedDict()
    #for k,v in sorted_tuples:
    #    sorted_dict_s12[k] = v
    #print(sorted_dict_s12)
    
    #s12_listed = list(sorted_dict_s12.items())
    s12_listed = radix_sort_letters(testing) #HAHAHA LETS GO IM SO PROUD OF MYSELF IM A CS GOD
    print('s12_listed and sorted:', s12_listed)

    values = list(s12.values())
    if len(values) == len(set(values)): print("no duplicates")
    else: print('duplicates')
    #print(s12_listed[0])
    #print(s12_listed[0][0])
    #print(s12_listed[0][1])


    #now to sort s0:
    sorted_tuples = sorted(s0.items(), key=operator.itemgetter(1))
    #print(sorted_tuples)
    sorted_dict_s0 = OrderedDict()
    for k,v in sorted_tuples:
        sorted_dict_s0[k] = v
    #print(sorted_dict_s0)

    s0_listed = list(sorted_dict_s0.items())
    '''
    testing2 = list(s0.items())
    s0_listed = radix_sort_letters(testing2)'''
    #print('s0_listed:', s0_listed)
    
    #now to merge the lists 
    #kinda gotta do this in one for loop or something to keep it linear
    size_of_s0_listed = len(s0_listed)
    size_of_s12_listed = len(s12_listed)
    #print(size_of_s0_listed)

    idk_s0 = 0
    idk_s12 = 0

    for i in range(size_of_s0_listed + size_of_s12_listed):
        #print(i)
        #print(s0_listed[i][1])
        s0_str = s0_listed[idk_s0][1]
        s0_int = s0_listed[idk_s0][0]
        s12_str = s12_listed[idk_s12][1]
        s12_int = s12_listed[idk_s12][0]
        if min(s0_str, s12_str) == s0_str:
            #print(s0_str)
            print(s0_int)
            idk_s0 = idk_s0 + 1
            if idk_s0 == size_of_s0_listed: #at the end of s0
                #print('about to go into while loop')
                #print('val of idk_s12: ', idk_s12)
                #print('val of size_of_s0_listed + size_of_s12_listed -i: ', size_of_s0_listed + size_of_s12_listed -i + idk_s12 -1)
                temp_val = size_of_s0_listed + size_of_s12_listed -i + idk_s12 -1
                while idk_s12 < temp_val:
                    s12_str = s12_listed[idk_s12][1]
                    s12_int = s12_listed[idk_s12][0]
                    #print(s12_listed[idk_s12][1])
                    print(s12_int)
                    #print('problem here on repeat?')
                    idk_s12 = idk_s12 + 1
                    #print('val of idk_s12 now: ', idk_s12)
                break
        else:
            #print(s12_str)
            print(s12_int)
            idk_s12 = idk_s12 + 1
            if idk_s12 == size_of_s12_listed: #at the end of list s12
                temp_val_2 = size_of_s0_listed + size_of_s12_listed -i + idk_s0 -1
                while idk_s0 < temp_val_2:
                    #print(s0_listed[idk_s0][1])
                    s0_str = s0_listed[idk_s0][1]
                    s0_int = s0_listed[idk_s0][0]
                    #print('im in here and i dont think ishould be')
                    print(s0_int)
                    idk_s0 = idk_s0 + 1
                break


    return solution


#suffixArray('ACAB$') # should print [4, 2, 0, 3, 1] #works for this one #and with radix sort added #ran into an error here where the '$' would throw an error since the ord of this evauluated to -54
#suffixArray('processing') #works here too #and works for the new sorting
suffixArray('AACGATAGCGGTAGA$') #seems to get the last 2 in reverse order since they are matching strings #works for radix sort but ran into same problem at the end
#suffixArray('CTCGCAGGTTGG') #works #works again with new radix sort
#suffixArray('CTCGCAGGGTATTACTATTTTTGATACCGAGCTATGTGGCCGTCAGATCCTTTATAACCTGCGTGGACACCTCGAATTTATTTGCTAGAATATATTACTATCAAACCAT') #works LETS GOOOO
#tried running this one to check for accuracy using this website and i broke the website : https://visualgo.net/en/suffixarray
#suffixArray('CGCAGAGATGATTAACCTGGGAACAATCACTACGACGTCCTCACTATACGTCGTTCTTACGTAACCATAACCGTGAGGGAGAGGAAGAAACAGTGGGGGATGCACCCGAGTAACTTGCCAGTGTCTTCAGCATCAGACATCTTGGAGACATGGCAAGGAACGTTCAATCAGACCATGACTCGCTATCTTTTTGCTCCGGTCTGCCGTGTTGACGTAACCTTTCCTCCTACAACTTATCCGTGTATACGGGGACTACACTATCCCAATTAAGGCTCAACGCCTACTTAGGTGTAGATCGGGCGGAGCTCCACATACTCGTACCTTTCTGTCAAGGTAAATCTCTCAACTAGTTTCGCTTAACCGGCTGGCAACGACGACTGATTTCAAACCTTATGATATCATCACCCTTGTGCGAGTCGATTAAGGTGGCTTGGCCGAGGCAGCGGTGCAGAAGAATCTAAATGCTTCGACGCGGATTCGTTGACGCTGAATTTGCCGTGTCCAGTTTATGCTCGGATTCAGGTACGATCAGAGGCTTGTTATAATTGATAGGGGATCTCTACAATACAGCCCTTGAAAGGCCTGGGCTCAACATGGTCAGGCAGCGTCGAGGCGCGTATTAATCGAAAGAGGACAACCCCATCGCGTGACGTGCCTCTGCCAATGCCATACGAGCCTGATTGTGATATTCGGGCATTGCGCCTCACTATGGCCTTGAGCTGTAAAGTCATGCGAAACCGCGACATGGGGAGGGAGGCCTAGAATACGGTTGCGAGAATCGACAACCTGGACTCATACCCAAGT$')
#suffixArray('CTCGCAGGGTATTACTATTTTTGATACCGAGCTATGTGGCCGTCAGATCCTTTATAACCTGCGTGGACACCTCGAATTTATTTGCTAGAATATATTACTATCAAACCATCTCATATAGGGGATCTTTGAGTGTCGTTGCCCAAGTTAGAGGTTGGTCGAGGGCGACATTAGAATCCTAGCAAGATGGCCGTTAAGTCCTCAGGCTCAGGTTAGCATGATCCATAAGTCAACCCGTTTCATAGGGCTTCAATTATTCGCAAACACATGTTCTACGGTGTTAAACCCGTTGGGATGTCTTGATCGTTAATGTAGGCAATTGAAGAACCGATCAATAATCTGGGGAGTTATCCGTACGTTAGTCCAGCTTCATATTATAATACGGCTAATACAAATAGAATAAATGAGGTCCGTCTAGATCTTGGTCCAGCACTTCGTGTACGCTCACACAATCCGATAGTTTTTTCGTAAGCGAGGGGTGCTCCCACAGAAGTAGTTGTAGTTTTCCACTTTGCAACGAACAACGAGCGCTGAACGTCGAAGTTCTAATCTTGTCGCTATACTTAATCAGTGTGATCTGTTGTATGAATAATGGAGTTAACTCCCTAACATGGGGGGTTAGAGTCTCCCAGACAAGACGGTATAATTTCCATACCCCCTAGTCGGCAATACGCGGCACGATTCTGAGGTGCCCCAGGTATGATTTTGAACCGCAAATCGTGTTAGCTTGCTGATTCCTTTATCCGCGACGTGAGTGCAATTTAAGAGCCAGCGGTTACTATCCTAACCGAAACGACAGAGTGGGCCGATAACAAACAGGGTCGTTACATGCGGAGTTTCGTGATATCGGGCATGCTGACCCACAAAGCCTTCCTGAATCACATCCCCCTAGAATTATTGAAGAGCCATTTCCCTCACTATAACAGGTATTATTCGCGCACGCCGGGCAAACGAGGCGTCGCTTTCGGAATCCGTAGCGGTAATGATGGGCTGCGGAAAGAGTCGCGACGAGCTCCTTAAGAAGTATAGAAGAGAACTCAAACAGAATGATGATGGCGACTGCTATTAAGTAGTAGTCAATGGCGCCAGGGGTGACTGACGCTACTACTTCCTGCGGGCGTACCCGATTACAACAGTGCATGTGGCCAAACCCTGATGTTCTCTGGATCATCCAAGTTTTTACAAGTCAATGGAAGCGAACACGAGACGCATGCGACTAGTGTAACATGCAAACATTCCAGTCTACCAATTGCGTACTCGAGATAAATGATCATTCCGGTATACACACCTGCTATACTGGACTCTATCGCAGTTATTACACTTAACTCTATTGTACACATAATTCCATTCCATCTCCCTGAACTAATTGTGACAGATTCTGATTGGGCTGACACTATTTCCACATCTGCGTAAGCAAGCCCACTTAACCGATATCGTCTCACTTGTATCTTCGGTAACGTCAATCTGAGCTAGTCATGAAACAGGCTGCACCAGGATTGCCGCTGCCAGATTGTCCAAATGAATAATTCCTTATAGCTCTTGTGCGCCTAACCGAACAATGCGCTCACAGAGTTGTCGAGATCGTATACAACCTAGAGCTCAAACGCTCTGTCTTTGAGCGAGTGAACGTAGGGCTACATCAATGCTGTTTCTGGTTCTGCGGAACAACGATGCTTGACTCTGGTAGTGGATCAGTTTTACTATACATAATGTGGGCTATTGTTTGATCTAGAGTGCAGCGGAATACTCCAGACACCGTATTCTGTACGACTGCTGTCCAGCACTCGCTGCATTTCGGTAACGCAATTGGGTAGTTCATGATGGCCATCTTTGGTAGGTTGCCTGCTATAACTGCAATATAAGAGTGCCGCCTAACTATCGGTTATTTCTGCGATTGACCTACATGCCCGCAGCAATATAAAGCGCGACTGGTCTCAAATTGGACTTTGAGCTTTGGGGTTCATGTCGCTCGGCTATTCGGTGTGCACACTGTGGCGCGTGTATGTAAGGCGCTAAGAACCCGCGGCCATATGCGTACGGGTAAGAGCAGCTATTGGATATTATCGGGCCTCTCATATCCCCGAAGCCTGTTCGACAATCTCTCAGGCGTTGTGACTCTAAGGCGCAGTAAATTAAAAATATAGGGCAGTCTATAAGCCAGTGAAACCCATCTCCGCTAAGTAAATATCCTAGCATGGTGTTCTTGCGTGAGATCTTCTCTGTTAGGGTCCGGGAATACTGGACGCACCGCCGGATAGCTTATGCGTGCTTTTAAACTGTCCAGCCGGGGTTGGGGAGTTCACCGAGAGGCTGATCCCGGCATCTCGGACTTGTGGAGACATATCGTAGGCGTTTTCGGACTACCACTTTTAGGCTGAGGCTGTGTAATAGTAGGGTAGGATTCTAGCAGGACGAAGTCCTAGGTATAGATTATTAGTATAGGCCTTTACTAAAGGGCCTCCTGCATTCAACGTGTTGACGGTTTTTGCCCTGCAAAAATGCATCCAGAGAGCATAGAGCCCCGACGTAGAAATCTCTGCGTGCTCGAATTCAGTTACTTCTCGTCACACTCTATCTGTAATACTAGCGTCTATATCACGTATAACGCCGCTTTAACGGATATCTGTGCAGGAAAATTGCGGAACCGTTCGAAGCCATGGTGAAGTGGTTCGCTAGGGATGTACTCTGGTCAGCGGTCCAACGTGTGCACCGAGTCAGCAGGCCTAATGAGGTTCAACAATACGACATTGGTGGCGTTCTGTTATTCGTCATGAACATAAGACGCACGCAGGGGGCCCGACGGGCTAGCATTGAAATCGCAGACTGTGCTTAGTAAACTGACTCCCAGGTCCGTCTGGTGAGGCCGATCCAAAAGCGCCGGGGCAATGGCGCAATACTAAACCGTACAACTCTCTGTAAGGATTCTATAAGCACTGCAACGTGCATCGTTCAGGGCCGATCATATACTAGTATGATCTGTACTGCGTTTTGGACATAGGTCTACTTTAGGACTTTGTTATTGCACTTCCCGCAGTTCCGGCGCACATGCGAAATCTCGGCGATTGAACGGACTAGTAGTGATCGCGTTATAGATGGAACTAGCGCAGACATAACCGGCCCCGATTCCTAGGGGTAACATTATCGAGAAGCGGGCGGCGCGAAACGCCGTTAGGTGGACTAAGCCCCCTCTAAACTTAGCCGACAATTGGTTACGATGGCGGCCGTACGAGTTGCAGTGCAGACCACCAGATGGGCAATTCAAAATACCGGTACCCGGCAGCATCGCCAACCAGGGTACCTGTTAGAGAAACCATAGGATAACGCGAACGTCGGCATACACCTCCAGCCGCGGGTAATAAACCTCCAGTCTCGTAGATCGGTCAGGAATGGCAGACAATATGACAGTGTGGAACAGCAAGAAACCCCGGTATCGCCAGCGTGAGCTCTCCATATGAGGTGCCCGCGCCAAGGCCAGATCATAACGCGGGGGTGATCTGAGCATTTCCGACGCCGTATCCGGCCACCCTAAATACCGAATCCAAATTGGATCAAGGGGGTGATATGGTACATGAGGCTTAACCCGCCGTTTTACATTGATGTTGACCTCCTACTTCTATGCAATGCCCCATCTGACCCTGGGTCCAGCATCTTTCGACTACGTGCCCGGTGTTATAAGAGCCGCGCACCTACCTAAGAGGCGCACTTGACGCTGAGCTTCCGTAGCTAGGGGTTCCGCAATTTGTCGACAAGGCCAATCTGTATAAATTCACCAAGCCTTACCAGGATTTCGCTAATATTCTTAAGCGTGTCGACTAAACGAACAACGGGAGCTTGTTTATTGCGGTTCAGGTCTGCCAATAGCAGGCAAGCATATCCGAATTCCAGTAACTCTTCAGTCACACACGCTGGGCACGCGACCTCTAAATGGCCGCGCGTGACCTGTGCATGGTGTCAGTCCAGGAGATTGGTTTCTAGCTATGTAGTATTAGGTTGGGTCCGAACACGCCTGCAGTCAGATTTTACAGCTTAGCTACTTCAGGGGCGAGAGCGGCAACGCCAGATAACCCCCAAAGCCTTCGGATACCCAAGCGCATGTAACATGGTTTTCGTAGTAGTTCGTTGCCTGTGGTCTTAGCGGGGGGTGTCAGAGGTTGCTGTGACGTACTGAGCAAATTTCCAGTAACATTGTATAGCGCTTGGTGCTAAATCGGGCTGTCCTGTTTGCAGGCCGAAGCATTATCCCAATCGCGTAGGAGAATCGACGCAGGCATCCCATTAAGGTTTATCGAATGGATCTTGCTGGCTAATGATTGTATATCACACGATGTAAAGTATGAACACCTCAGTCCGCCGGCCAAAGACTACTAGATATCCAGAAGATATTAATATGAACTGTGCCGATTAGAGAGGTCTCAGAGGATTTTCTAGCTTTGCGATAGGAGGCTCTAAGGTAGCATAGTCAGGGTCGGACGTTCGATCAGCCCGAACTGAGATTGTTAGAATCGATGCTTTTCTAATAGCAGCATCCGGGGATCTCGTATCAGTGCTCACAAGTACTGGTGAGGAGGGGGATTCAATATGACGTCCGCACAAATCATGTTTAATTTGGTTAATTACGTTATGCTTCGTGGTAAAATGATACGAGATCCCCATTGGTTCTAGTGCGCATGTGTACTCCCCTGAAGAGCTCACAAGTTATTGTTGCAGTTACCAGGGCTGCATATTATGTTCCGGCATATGGCCGCGGATTCGACACGACGGTCTGTACAGACTTTCAATGTAGTGAAGAAGCCGGTCTTACGAAGATCGCGAGTGATTAAGTATACGAATTATCGACCCCTCTGCTTAGAGTCCAGCAATCCAACAAACCTAGGTGAGCGTTGCACCAATGTGGCAACAATAGTATACTGTTCCTGCATACGCTCTCATTATATGAAGCGTATGAGTGCGTGCCCGCTTTTTACGAAAACAAATTACCCGTGAAATTAGGCCACAGTGTTTGTTCTCGGGTTTTAATCACGTCGCAGATGTTCTACAGCTCTTGCATGCGTTGAAATACTCTAGTGGTATTGAACCCGAGACTATAGGACACTCGAAGCGTGAGACGGAGTCGGGAATGGTGGGATCCCATTCGAAATGTATACCTCCGCCGTTTAATCGCGTTGGCCAGAGCTACACGAAGCAGTGCAGGTCGATCCCATTGGCTCAACAAGGTATTCCGAAACATCGGATTGAATTTTCGTCCGCCACAGGTTTGGGACCCTTTGAAACTCCTGTGTAAATTCAAGTGGCTTGGGTGAATCGGTGGTTCCTGACTCGCACGTGATCGAAAAGGGTTTACATTAATTGCGTGAGTTAATGACGGAAACTATGAGACTCTCCCCGACGGGAACGGTGCTGTCGCGGCACATGTTTGCCTTGATGACTCACCATAGGTTTGTGCTAATTATTTTGTTGGGGTGGCTTGTATTCCATATATGATTACCCATACTTCTAGGGAATATAAGATACGCAATACGGAGAGTTGGCAAGTCGCTAAGTTCTTAGTATCGTTTCTGCGTCTGCACGCCAGAGCACCGGTAGGTCCTCTTGCATTGAGGATGATGTTTTCCCCCATGATAACTAAGAAAGCAGGCATGGGGAGTCTCGCGATGACGTCACTCGGGCGGTAGCCGGCGTAGGTCCCAAAGACTTGCTAAATTCGTACTTTGGTGTTTAGAGGCGGTCCGCGACGAGATCTCGAGGTCCGGGATTATGGGGCACACGCAACCCTTAGAGGGGCAGTGGCAGCCTCGTCGAATATATCAGCTACATTTTATTTTACAAGTACACCGTCCACCAGCGGGTTCCCCTGCTGAGCTCGAGCGGCAAGGATCCGTAACGGCATAAGCTTCGACTTCGCACGTCTTGAATAACTAGCACTGCCATTCCTCAGTCTTCACATCCTTGAGTTATAGGGTTTTATTCCTTATGAACTAGTTCAATGCCTAAGCGTTGCTGGACCTTAGCGGTGTACTTGGATTTGTAAGAAAGGCACGCACTGATGCGTTACAACCGATGGATGGGCAACAACTAAGTTACATTGAGCTCGGCAGCTCACCAAATTTGATCCGATTAGCGGTGGAGAAGTAGCGGTACCCGTAGGTATAGAGAGACCAAAGGATACTATTGCGATATGGGAAAGGCCATGCATCTAGGCCCTCAAATCAGGTATCAAGCTTGGTATGATGCGATCGTCTTAAACGTGTGACCCCTCTCTTATATACGTGATCTCCAAGCGTACCAGATTCTACCCGAATGTAATGCACGCGTCGACCCACACGTTTGATGCACTCGGGTCCCGATAGGTGGTCGGTTTATCCACTGATCTTCCACAGCCTCCGAGTTGAAAACTCTTCCTACCAAGACTATAAGTCCTCGTTTTTACCCCCGTAAGCGGTAAAGTCTTGCTACGTATCCTTATTGGCGTTATTTAGGCTCACGTTTGACTTGCGCCTACGTTATAACCTACCGTATGCTATTGGCAAGGGGGAACATGGCCTGTCGTTCCTGCTGTCCTGCTAGAGAGAAGATTTAAGCGGACGGTTCTAGCAATTCCAGTACTTGAATAGTCTACAGTGCGGGACTTTATCCTGCACGGGCTTGTCTGATCTTTACGTAAACCCTTATGAGTAAGGCGGAAATCGGCGGGTGTGCTAAACGGGTGGTTGTAATCGACATGAATTAATACCTCTATCAAGAGACCGTGCGTGCGTTTTAATAACTAGTATGCCGGGTTAGACCGGGCCGCTTGAGCCAAGTCCGAACGTCAGATTGGTGTCTATGGCCTTCGTTTCGTGAAGTGCGTGTGAGCTGTGGCCTGTTTGGGTACTAGACAACGTCAATGGATTGCATTAGATGTGTCCAGGGTGTCTGACGTACGACATAAGATCGCTAAAATTCGGCTCCCGATACCGTCTGCAAGAGCGTACTCCACTTATGCTTTCCCGAATAATCCAGGTGCCACGTCCGATGTGTTGAACCTCATGGAGTTGTGTATGTCTATCATTTTCGGTCAAGTAAGGTCCACGAAGTTGGCAGAAGACCGGACGGTGAGGACAATGACGTCAATTTACATACAGGGCAGCATTGACTGACTGCCTGCAATGCGGGGACCCCACCGGACAAAATAGAACCCTTATTCAGGTATGAGTACTAATCTATATAACGCCCGTGGTAATGGGTCCCTCCCAGTCGCCCCTGGAGGGTACGCGGGCACTATACAACCCACATAGATGAGACAACAGTCTCAGCCGTACGAAGTGCCTAATTCCTTGAGTGCCGTCCATCATCTCTGATCTGGAGAAAGGGGTGGTTGCCTGGGAGGTGATGCCGCGCGAGTGAGATATCGTTAGCAACCCATCTGCCACAAGGGGCGCCTGGGGCCACTTCAATCCAGCCAGACTTACGTGTGCGAGCTCATTGATGCAACGCCGTATGAACTTTACAAGGATTGGGGTCTGCCATCTTCTACCGTATATAATGTGCTCGAAGCTAAGTCGGCAACTGTGCAAATCAGCAATAGGGTTAGCGATGTTTCCAGGGTATAGTTAATCCGACAGGTTCTTTAGCCTTAGCATAGTGGTCTACAGGGGTTGCGTCCTTTGGCCAATATCAGCGAAGCTATGAATCCTAGCGTTGGGTCTGTATCTATTACGATCTTAGATTCCCCAAGCCACGGTGTGCTCTATCTTAGACTCAATTCATTTTCATAAAAAACAGCGATAGCTCTTGACAGGCCACACTAGAAAGGACGATGGAGAACTGCTAGTCGGACCACCTTACCCAATACCACTTCATGTGCGGGGGATCTAGTACCGCCCGCGCGTCAGGGACGGTCCATCTCACCGCTGTTGCCGGGCAAGCGACAATCCTCGTACGGTTGCGGCAGATAGAATTTACATAATTGCACAGGCACTTGTCAGTCGAGCTCAGGCTTGCCAGCGCTGTCCGGCCAAACACCTCCGGATGCTGGTTTTAGTCGCCGTCACACTCGAACGGGTCTCCATGGGGGTGAACGCGGGAGTCGTTTGCTGCTAAGTCCCGAGCGTCTCTAAGTGTCGTCACTCGACCCTCCGGGCAAATTACTCCACGGCTATCGCACACGATTGGCCCAAAATACTTGCGGCCTTGACCCTGGTGGTGCGAACAGCATCTCATGGGTAAGGGGGCCCGAGATTACCTGCCGCTCAATTGCGGACTGTAGATGGCTATGAATCGGGTCTAAGCTTGAGTATTCTCGGATGAGGTTAAAGCGCATGAGATTTTCAGTAATGCAAGGTGGGGTCGCGAGCAATCCGGGTTTAGTGTTGTCGCAGGATTTTCTACTCCAATCAATCGTTATGTGTCTGGCACAGTCAGCTCACAGTCCTTGGACTATTCTTACAGTCCGCGGCAGCGCAATGCGCGTTCTATGACAAGGATGTACTGACGAAGTTAGTTCGCCCTAGTAAACAGTTATTCCATTCGAGGTAAACGTTTGAACACGCGGTCGCGCCATATTTGTACTAAGGATTGGTTATCGTCGCCCTAGCCTTGAAAAGGTTACACGATCGTGGTCAATTGGAAACTACCAATGGGAGCAGCCGCGAGCTGCGCTGGTCCCCTGGTTATCGCTTGTAGAGGCATAACCGAGTAATAACTATGACCAATTGAACCCATAAATTAACCACGAGAGCTATAGGGTCCTGAGATCATCGGTGTACCGGTCGAGCGGATCGCGTGGGATCTTTTTATCGGTACCGTTGCCTGGCTGAGCGACGAGAAGCTATAGGAAGCAGAGGTAAATCTCAACTAGGCCTCTGTGCGTACCCTGGTTGCATAAGAAACCGTTAGATGGGGGATCTCCTCAGCAACTAGAGCAAACCGCTCGGTCGCATTATCTTCAAGTCATGAGACCCAAAAACCGACCAGTGCTGGATCACATGTTTCTGGGATTATTATGGCTCAGTTCTGGGCGGGCAGAAAATAGATCTGATAAGTGCCGGTAAGTTGCCGTCATGCGACGCCGGGTCGTGGTGCAATTATTTGAACCCCGTGAGGTATGTCGCCCTGTACCTAATCGATTTAATGGCCTGGCATGTTATCGATAAGCCAATGTGTATCGGGTTGAGCGAATATCCATAGTTCCTTGAGACTCAAAGGGACATGGGTGATCGGGTACCCCGAGGGCGTAGCTTAGGTCCTGGCCTTCCATGAGTCGTGGTAAGAAGAATGGTGGCGTGCGTCCGTACCATGTCCAACTTGGTGCGAGTGAGAACCCTACTAGCATACCTGGGACCTTGGCCCCTTCGGCCTGGCAGTTCTAGCGTCACGAAGGACTTCTCGGAGGAATAATGAATCGGAATCTGCAGGACGAGGGCCCATACGGTCATCTTACCTTGCTTCGTGTCATTAGAGGGGCCATATAGTTCGTCGACAGTCCTCTCAACCGTAAGTCGTTCGGAGGGTTCGGACCGTCATGAATTTGAAACGTCCGGTCCTTAAGTTCGGCGGAAAAGACTTACCTATCTGCTCAAACAATATGCAGTTGTATAAGGACATGCGTCTATGACGCTGCGAACCAAATGCGGGCCTACTCAGGACTCCTTATATTTAACTTATAGTTTTCACTGCCTACTTACGACTAATAGCACTCGGCGGTCTTATGAGGCTATGACGTTGATTTCGGAGTATTTGGCGTGGCAGCGCCCGTTCGTCCATTCTCAAATTTGGGGGGCCCTAATATTCAAAAGGACGCGGATTCATGCTAGTATGCATCCTCGAGTGGATTGTCGTGGTCGTTTGAACGCCGCTCAGTAGTGATTCACCCAACTCAGAACGATAGGCGTCAATTCGTCTTTAGAGCATAGCTTGTGGGGGACGAGGCCAGGAGTGGAAGTTGCTCCTCGGGCAACAGCATACCTCCTTAATTGAGTAGTTACATACGGGCTTTCAGCCAGCTCCATTGCGGCACGGTGCTTCC$') #this broke my computer HAHA